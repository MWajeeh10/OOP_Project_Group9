main.cpp:
#include "game.hpp"
int main(int argc, char* argv[]) {
    ScreenManager screenManager;
    screenManager.run();

    return 0;
}

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------


game.hpp:

#include <SDL.h>
#include <SDL_image.h>
#include <SDL_mixer.h>
#include <SDL_ttf.h>
#include <iostream>
#include <string>
#include "dice.hpp"
#include "tokens.hpp"

// Enumeration to represent different screens
enum ScreenType {
    WELCOME,
    PLAYER_SELECTION,
    RULES,
    EXIT
};


// Base class for screens
class Screen {

public:
    virtual ~Screen() {}
    virtual void show(SDL_Renderer* renderer, ScreenType& nextScreen) = 0;
};



// Update the WelcomeScreen class
class WelcomeScreen : public Screen {
    private:
        bool startGame; 
    
    public:
        WelcomeScreen() : startGame(false) {}
        virtual void show(SDL_Renderer* renderer, ScreenType& nextScreen) override;
        ~WelcomeScreen();


};



// Update the PlayerSelectionScreen class
class PlayerSelectionScreen : public Screen {

    private:

        //for managing the dice turns
        enum class Turn {
            DICE1,
            DICE2,
            DICE3,
            DICE4
        };

        Turn currentTurn;

        SDL_Texture* loadTexture(const std::string& path, SDL_Renderer* renderer);
        void renderTexture(SDL_Texture* texture, SDL_Renderer* renderer, int x, int y);
        Dice* dice1;  // red dice
        Dice* dice2;  // green dice
        Dice* dice3;  // yellow dice
        Dice* dice4;  // blue dice
        Token* redToken;  // red token
        Token* greenToken; // green token
        Token* yellowToken;
        Token* blueToken;
        // int currentTurn;

    public:
    PlayerSelectionScreen(SDL_Renderer* renderer);
    // virtual void show(SDL_Renderer* renderer, ScreenType& nextScreen) override;
    void show(SDL_Renderer* renderer, ScreenType& nextScreen);
    ~PlayerSelectionScreen();


};


// Update the RulesScreen class
class RulesScreen : public Screen {
    protected:

    public:
        virtual void show(SDL_Renderer* renderer, ScreenType& nextScreen) override;
        ~RulesScreen();
};



// Update the ScreenManager class
class ScreenManager {

    private:
        SDL_Window* window;
        SDL_Renderer* renderer;
        ScreenType currentScreen;
        Mix_Music* music;
        void playMusic();
        
    public:
        ScreenManager();
        ~ScreenManager();
        void run();
};


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






game.cpp:



#include "game.hpp"
#include <SDL_mixer.h>
#include <SDL_ttf.h>
#include <iostream>

// #include "game.hpp"

// Implementation of WelcomeScreen
void WelcomeScreen::show(SDL_Renderer* renderer, ScreenType& nextScreen) {
    Mix_Music* music = Mix_LoadMUS("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\audio2.mp3");
    // Play music
    Mix_PlayMusic(music, -1);

    SDL_Surface* image = IMG_Load("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\welcome\\screen1.png");
    SDL_Surface* imageClicked = IMG_Load("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\welcome\\screen2.png");
    SDL_Surface* rulesImage = IMG_Load("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\rules\\rulesblink.png");
    
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, image);
    SDL_Texture* textureClicked = SDL_CreateTextureFromSurface(renderer, imageClicked);
    SDL_Texture* rulesTexture = SDL_CreateTextureFromSurface(renderer, rulesImage);

    SDL_FreeSurface(image);
    SDL_FreeSurface(imageClicked);
    SDL_FreeSurface(rulesImage);

    SDL_RenderClear(renderer);
    SDL_RenderCopy(renderer, texture, NULL, NULL);
    SDL_RenderPresent(renderer);

    bool startGame = false;

    //event handling loop
    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        if (event.type == SDL_QUIT) {
            nextScreen = ScreenType::EXIT;  // Set nextScreen to EXIT when the window is closed
            break;
        } else if (event.type == SDL_MOUSEBUTTONDOWN) {
            int x, y;
            SDL_GetMouseState(&x, &y);
            std::cout << "Mouse clicked at (" << x << ", " << y << ")\n";
            if (x >= 222 && x <= 560 && y >= 246 && y <= 299) {
                // Create a blinking effect for the "Start" button
                for (int i = 0; i < 3; ++i) {
                    SDL_RenderClear(renderer);
                    SDL_RenderCopy(renderer, textureClicked, NULL, NULL);
                    SDL_RenderPresent(renderer);
                    SDL_Delay(250);

                    SDL_RenderClear(renderer);
                    SDL_RenderCopy(renderer, texture, NULL, NULL);
                    SDL_RenderPresent(renderer);
                    SDL_Delay(250);
                }
                startGame = true;
                break;
            } else if (x >= 222 && x <= 558 && y >= 438 && y <= 490) {
                // Create a blinking effect for the "Rules" button
                for (int i = 0; i < 3; ++i) {
                    SDL_RenderClear(renderer);
                    SDL_RenderCopy(renderer, rulesTexture, NULL, NULL);
                    SDL_RenderPresent(renderer);
                    SDL_Delay(250);

                    SDL_RenderClear(renderer);
                    SDL_RenderCopy(renderer, texture, NULL, NULL);
                    SDL_RenderPresent(renderer);
                    SDL_Delay(250);
                }

                // Set the flag to transition to the rules screen
                nextScreen = ScreenType::RULES;
                break;  // Break out of the loop after showing the rules
            }
        }
    }

    

    SDL_DestroyTexture(texture);
    SDL_DestroyTexture(textureClicked);
    SDL_DestroyTexture(rulesTexture);

    if (startGame) {
        // Stop the music when transitioning to the player selection screen
        // Mix_HaltMusic();
        nextScreen = ScreenType::PLAYER_SELECTION;
    }

    // Free the music at the end
    Mix_FreeMusic(music);
}

SDL_Texture* PlayerSelectionScreen::loadTexture(const std::string& path, SDL_Renderer* renderer) {
    SDL_Surface* surface = IMG_Load(path.c_str());
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_FreeSurface(surface);
    return texture;
}

void PlayerSelectionScreen::renderTexture(SDL_Texture* texture, SDL_Renderer* renderer, int x, int y) {
    SDL_Rect destination;
    destination.x = x;
    destination.y = y;
    SDL_QueryTexture(texture, nullptr, nullptr, &destination.w, &destination.h);
    SDL_RenderCopy(renderer, texture, nullptr, &destination);
}

PlayerSelectionScreen::PlayerSelectionScreen(SDL_Renderer* renderer) : dice1(nullptr), dice2(nullptr), dice3(nullptr), dice4(nullptr),currentTurn(Turn::DICE1) {
    // Initialize the Dice object with the path to the dice image and initial position
    
    dice1 = new Dice(renderer, {"C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\red\\red1.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\red\\red2.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\red\\red3.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\red\\red4.png",
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\red\\red5.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\red\\red6.png"},
                    82, 80);

    dice2 = new Dice(renderer, {"C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\green\\green1.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\green\\green2.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\green\\green3.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\green\\green4.png",
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\green\\green5.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\green\\green6.png"},
                    530, 80);

    dice3 = new Dice(renderer, {"C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\yellow\\yellow1.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\yellow\\yellow2.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\yellow\\yellow3.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\yellow\\yellow4.png",
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\yellow\\yellow5.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\yellow\\yellow6.png"},
                    530, 530);

    dice4 = new Dice(renderer, {"C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\blue\\blue1.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\blue\\blue2.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\blue\\blue3.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\blue\\blue4.png",
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\blue\\blue5.png", 
                               "C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\dices\\blue\\blue6.png"},
                    80, 530);

}

// PlayerSelectionScreen class
void PlayerSelectionScreen::show(SDL_Renderer* renderer, ScreenType& nextScreen) {
    Mix_Music* music = Mix_LoadMUS("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\audio1.mp3");
    Mix_PlayMusic(music, -1);
    // Load the board image
    SDL_Surface* boardImage = IMG_Load("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\board.png");
    SDL_Texture* boardTexture = SDL_CreateTextureFromSurface(renderer, boardImage);
    //TOKEN:
    // Load textures for different colored tokens
    SDL_Texture* redTokenTexture = loadTexture("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\tokens\\red1.png", renderer);
    SDL_Texture* greenTokenTexture = loadTexture("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\tokens\\green1.png", renderer);
    SDL_Texture* yellowTokenTexture = loadTexture("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\tokens\\yellow1.png", renderer);
    SDL_Texture* blueTokenTexture = loadTexture("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\tokens\\blue1.png", renderer);
        // Check if loading any texture failed
    if (!redTokenTexture) {
        // Handle error
        SDL_DestroyTexture(boardTexture);
        return;
    }

    if (!greenTokenTexture) {
        // Handle error
        SDL_DestroyTexture(boardTexture);
        return;
    }

    
    if (!yellowTokenTexture) {
        // Handle error
        SDL_DestroyTexture(boardTexture);
        return;
    }

    
    if (!blueTokenTexture) {
        // Handle error
        SDL_DestroyTexture(boardTexture);
        return;
    }

    // Create tokens based on dice colorS
    redToken = new Token(renderer, redTokenTexture);
    // redToken->setStartPosition(5, 305);
    redToken->setStartPosition(0, 0);
    redToken->lock(); //initial state will be locked


    greenToken = new Token(renderer, greenTokenTexture);
    // greenToken->setStartPosition(405, 55);
    greenToken->setStartPosition(450, 0);
    greenToken->lock(); //initial state will be locked


    yellowToken = new Token(renderer, yellowTokenTexture);
    // yellowToken->setStartPosition(655,405);
    yellowToken->setStartPosition(710, 450);
    yellowToken->lock(); //initial state will be locked



    blueToken = new Token(renderer, blueTokenTexture);
    // blueToken -> setStartPosition(305,655);
    blueToken->setStartPosition(260, 710);
    blueToken->lock(); //initial state will be locked

    SDL_FreeSurface(boardImage);
    SDL_RenderClear(renderer);
    SDL_RenderCopy(renderer, boardTexture, NULL, NULL);
    redToken->render(renderer);
    greenToken->render(renderer);
    yellowToken->render(renderer);
    blueToken->render(renderer);
    // Render the board
    if (dice1) {
        dice1->render(renderer);  // Pass the renderer here
    }

    if (dice2) {
        dice2->render(renderer);  // Pass the renderer here
    }

    if (dice3) {
        dice3->render(renderer);  // Pass the renderer here
    }

    if (dice4) {
        dice4->render(renderer);  // Pass the renderer here

    }
    

    SDL_RenderPresent(renderer);
    
    // gameTime.start();
    bool running = true;
    SDL_Event event;
    while (running) {
        // Handle events
        
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                running = false;
                nextScreen = ScreenType::EXIT;
            } else if (event.type == SDL_MOUSEBUTTONDOWN) {
                int x, y;
                SDL_GetMouseState(&x, &y);
                std::cout << "Mouse clicked at (" << x << ", " << y << ")\n";

                // std::cout<<"Current Turn: Player Red!!!"<<std::endl;
                // Handle dice rolling logic based on mouse click
                if (x >= 80 && x <= 212 && y >= 80 && y <= 212 && currentTurn == Turn::DICE1) {
                    if (dice1) {
                        //dice roll will happen and a random face will be generated
                        dice1->roll(renderer);
                        //dice score is stored and displayed
                        int diceScore = dice1->diceScore();
                        std::cout << "Dice Score for Red is: " << diceScore << std::endl;

                        //condition if redToken is not locked, then move to next position based on diceScore
                        if(redToken->getPosition().x == 0 && redToken->getPosition().y == 0 && redToken->isLocked()){
                            if(diceScore==6){
                                redToken->unlock(); //unlock red if dice score is 6
                                redToken->setStartPosition(55,305); //Move token to start position
                                std::cout<<"Player Red unlocked and moved to start location\n"<<std::endl;
                                std::cout<<"Player Red gets another turn\n";
                                // std::endl;

                                continue; //gets another turn
                            }
                            else{
                                currentTurn = Turn::DICE2;
                            }
                        }
                        else{
                            if(diceScore==6){
                                redToken->moveToNextPositionRed(diceScore);
                                currentTurn = Turn::DICE1;
                                std::cout<<"Player Red has another turn!!\n"<<std::endl;
                                continue;
                            }

                            else{
                                redToken->moveToNextPositionRed(diceScore);
                                currentTurn = Turn::DICE2;
                                std::cout<<"Next Player turn is: Player Green!!\n"<<std::endl;
                            }
                        }
                        checkAndMoveBackToHome(redToken, blueToken, greenToken, yellowToken);

                    }
                } else if (x >= 530 && x <= 662 && y >= 80 && y <= 212 && currentTurn == Turn::DICE2) {
                    if (dice2) {
                        //dice roll will happen and a random face will be generated
                        dice2->roll(renderer);
                        //dice score is stored and displayed
                        int diceScore = dice2->diceScore();
                        std::cout << "Dice Score for Green is: " << diceScore << std::endl;

                        //condition if greenToken is not locked, then move to next position based on diceScore
                        if(greenToken->getPosition().x == 450 && greenToken->getPosition().y == 0 && greenToken->isLocked()){
                            if(diceScore==6){
                                greenToken->unlock(); //unlock green if dice score is 6
                                greenToken->setStartPosition(405,55); //Move token to start position
                                std::cout<<"Player green unlocked and moved to start location"<<std::endl;
                                std::cout<<"Player Green has another turn\n";
                                std::cout<<std::endl;
                                continue; //gets another turn
                            }
                            else{
                                currentTurn = Turn::DICE3;
                            }
                        }
                        else{
                            if(diceScore==6){
                            greenToken->moveToNextPositionGreen(diceScore);
                            currentTurn = Turn::DICE2;
                            std::cout<<"Player Green gets another turn!!\n"<<std::endl;
                            std::cout<<std::endl;
                            continue;
                            }

                            else{
                                greenToken->moveToNextPositionGreen(diceScore);
                                currentTurn = Turn::DICE3;
                                std::cout<<"Next Player's turn is: Player Yellow!!\n"<<std::endl;
                                std::cout<<std::endl;
                                }
                        }
                        checkAndMoveBackToHome(greenToken, redToken, yellowToken, blueToken);

                        
                    }
                } else if (x >= 530 && x <= 662 && y >= 530 && y <= 662 && currentTurn == Turn::DICE3) {
                    if (dice3) {
                        //dice roll will happen and a random face will be generated
                        dice3->roll(renderer);
                        //dice score is stored and displayed
                        int diceScore = dice3->diceScore();
                        std::cout << "Dice Score for Yellow is: " << diceScore << std::endl;

                        //condition if yellowToken is not locked, then move to next position based on diceScore
                        if(yellowToken->getPosition().x == 710 && yellowToken->getPosition().y == 450 && yellowToken->isLocked()){
                            if(diceScore==6){
                                yellowToken->unlock(); //unlock yellow if dice score is 6
                                yellowToken->setStartPosition(655, 405); //Move token to start position
                                std::cout<<"Player Yellow unlocked and moved to start location"<<std::endl;
                                std::cout<<"Player Yellow has another turn!!!\n";
                                std::cout<<std::endl;
                                continue; //gets another turn
                            }
                            else{
                                currentTurn = Turn::DICE4;
                            }
                        }
                        else{
                            if(diceScore==6){
                                yellowToken->moveToNextPositionYellow(diceScore);
                                currentTurn = Turn::DICE3;
                                std::cout<<"Player Yellow gets another turn!!"<<std::endl;
                                std::cout<<std::endl;
                                continue;
                            }

                            else{
                            yellowToken->moveToNextPositionYellow(diceScore);
                            currentTurn = Turn::DICE4;
                            std::cout<<"Next Player's turn: Player Blue!!"<<std::endl;
                            std::cout<<std::endl;
                            }
                        }
                        checkAndMoveBackToHome(yellowToken, greenToken, redToken, blueToken);

                        
                    }
                } else if (x >= 80 && x <= 530 && y >= 530 && y <= 662 && currentTurn == Turn::DICE4) {
                    if (dice4) {
                        //dice roll will happen and a random face will be generated
                        dice4->roll(renderer);
                        //dice score is stored and displayed
                        int diceScore = dice4->diceScore();
                        std::cout << "Dice Score for Blue is: " << diceScore << std::endl;
                        //condition if blueToken is not locked, then move to next position based on diceScore
                        if(blueToken->getPosition().x == 260 && blueToken->getPosition().y == 710 && blueToken->isLocked()){
                            if(diceScore==6){
                                blueToken->unlock(); //unlock blue if dice score is 6
                                blueToken->setStartPosition(305,655); //Move token to start position
                                std::cout<<"Player Blue unlocked and moved to start location";
                                std::cout<<"Player Blue has another Turn"<<std::endl;
                                std::cout<<std::endl;
                                continue; //gets another turn
                            }
                            else{
                                currentTurn = Turn::DICE1;
                                std::cout<<"Next Player's turn: Red\n";
                            }
                        }
                        else{
                            if(diceScore==6){
                            blueToken->moveToNextPositionBlue(diceScore);
                            currentTurn = Turn::DICE4;
                            std::cout<<"Player Blue gets another turn!!"<<std::endl;
                            std::cout<<std::endl;
                            }

                            else{
                                blueToken->moveToNextPositionBlue(diceScore);
                                currentTurn = Turn::DICE1;
                                std::cout<<"Next Player's turn: Player Red!!"<<std::endl;
                                std::cout<<std::endl;
                            }
                        }
                    
                    checkAndMoveBackToHome(blueToken, greenToken, yellowToken, redToken);
                        
                    
                }

            }
        }
        }
        SDL_RenderClear(renderer);

        // Render the board
        SDL_RenderCopy(renderer, boardTexture, NULL, NULL);


        // Render the tokens
        redToken->render(renderer);
        greenToken->render(renderer);
        yellowToken->render(renderer);
        blueToken->render(renderer);
        if (dice1) {
            dice1->render(renderer);
        }

        if (dice2) {
            dice2->render(renderer);
        }

        if (dice3) {
            dice3->render(renderer);
        }

        if (dice4) {
            dice4->render(renderer);
        }
        // Clear the renderer

        // Render the dice

        // Present the renderer
        SDL_RenderPresent(renderer);

        // Add a slight delay to control the frame rate
        SDL_Delay(16);

        // Update the game timer
        // gameTimer.update();

        // Render the game timer
        // gameTimer.render(renderer); 

    }
        


    SDL_DestroyTexture(boardTexture);
    Mix_FreeMusic(music);
}


bool PlayerSelectionScreen::checkAndMoveBackToHome(Token* currentToken, Token* token2, Token* token3, Token* token4) {
    // if (currentToken->getPosition().x != currentToken->mainTrackStartX() && currentToken->getPosition().y != currentToken->mainTrackStartY()){
        // Check if the new position overlaps with other tokens
        if (currentToken->getPosition().x == token2->getPosition().x &&currentToken->getPosition().y == token2->getPosition().y) {
            // // token2->moveToHome();
            // token2->lock();
            // bool check = true;
            if(token2 == redToken){
                redToken->lock();
                redToken->setStartPosition(0,0);
                // return true;
            }
            else if (token2 == greenToken){
                greenToken->lock();
                greenToken->setStartPosition(450,0);
                // return true;
            }
            else if(token2 == blueToken){
                blueToken->lock();
                blueToken->setStartPosition(260,710);
                // return true;
            }
            else if(token2 == yellowToken){
                yellowToken->lock();
                yellowToken->setStartPosition(710,450);
                // return true;
            }
            
        } else if (currentToken->getPosition().x == token3->getPosition().x &&currentToken->getPosition().y == token3->getPosition().y) {
            if(token3 == redToken){
                redToken->lock();
                redToken->setStartPosition(0,0);
                return true;
            }
            else if (token3 == greenToken){
                greenToken->lock();
                greenToken->setStartPosition(450,0);
                return true;
            }
            else if(token3 == blueToken){
                blueToken->lock();
                blueToken->setStartPosition(260,710);
                return true;
            }
            else if(token3 == yellowToken){
                yellowToken->lock();
                yellowToken->setStartPosition(710,450);
                return true;
            }
        } else if (currentToken->getPosition().x == token4->getPosition().x &&currentToken->getPosition().y == token4->getPosition().y) {
            if(token4 == redToken){
                redToken->lock();
                redToken->setStartPosition(0,0);
                return true;
            }
            else if (token4 == greenToken){
                greenToken->lock();
                greenToken->setStartPosition(450,0);
                return true;
            }
            else if(token4 == blueToken){
                blueToken->lock();
                blueToken->setStartPosition(260,710);
                return true;
            }
            else if(token4 == yellowToken){
                yellowToken->lock();
                yellowToken->setStartPosition(710,450);
                return true;
            }
        }
        return false;
    // }
}


// RulesScreen class
void RulesScreen::show(SDL_Renderer* renderer, ScreenType& nextScreen) {
    SDL_Surface* rules1 = IMG_Load("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\rules\\rules1.png");
    SDL_Texture* rules1Texture = SDL_CreateTextureFromSurface(renderer, rules1);
    SDL_FreeSurface(rules1);

    SDL_RenderClear(renderer);
    SDL_RenderCopy(renderer, rules1Texture, NULL, NULL);
    SDL_RenderPresent(renderer);

    // Wait for a quit event or a mouse click
    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        if (event.type == SDL_QUIT) {
            nextScreen = ScreenType::EXIT;  // Update nextScreen if the user quits
            break;
        } else if (event.type == SDL_MOUSEBUTTONDOWN) {
            int x, y;
            SDL_GetMouseState(&x, &y);
            std::cout << "Mouse clicked at (" << x << ", " << y << ")\n";

            // Check if the BACK button is clicked
            if (x >= 504 && x <= 700 && y >= 700 && y <= 735) {
                nextScreen = ScreenType::WELCOME;
                return;  // Return to the previous screen (Welcome screen)
            }
        }
    }

    SDL_DestroyTexture(rules1Texture);
}


// Implementation of ScreenManager
ScreenManager::ScreenManager()
    : currentScreen(ScreenType::WELCOME), music(nullptr) {
    window = SDL_CreateWindow("Ludo Game", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 750, 750, SDL_WINDOW_SHOWN);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    // Load music
    music = Mix_LoadMUS("C:\\Users\\USER\\OneDrive\\Documents\\GitHub\\OOP_Project_Group9\\assets\\audio2.mp3");
    // Play music only if it's not already playing
    playMusic();
}

ScreenManager::~ScreenManager() {
    // Free music
    if (music) {
        Mix_FreeMusic(music);
    }
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    Mix_Quit();
    SDL_Quit();
}

void ScreenManager::playMusic() {
    if (music) {
        // Play music only if it's not already playing
        if (Mix_PlayingMusic() == 0) {
            Mix_PlayMusic(music, -1);
        }
    }
}

void ScreenManager::run() {
    while (currentScreen != ScreenType::EXIT) {
        switch (currentScreen) {
            case ScreenType::WELCOME: {
                WelcomeScreen welcomeScreen;
                welcomeScreen.show(renderer, currentScreen);
                break;
            }
            case ScreenType::PLAYER_SELECTION: {
                PlayerSelectionScreen playerSelectionScreen(renderer);  // Pass renderer here
                playerSelectionScreen.show(renderer, currentScreen);
                break;
            }
            case ScreenType::RULES: {
                RulesScreen rulesScreen;
                rulesScreen.show(renderer, currentScreen);
                break;
            }
            // Add more cases for other screens as needed
            default:
                // Handle unknown screen type
                break;
        }
    }
}



WelcomeScreen::~WelcomeScreen() {
    // Add any cleanup code if needed
}
// PlayerSelectionScreen destructor
PlayerSelectionScreen::~PlayerSelectionScreen() {
    // Cleanup the first Dice object
    if (dice1) {
        delete dice1;
    }

    // Cleanup the second Dice object
    if (dice2) {
        delete dice2;
    }

    if (dice3) {
        delete dice3;
    }

    // Cleanup the second Dice object
    if (dice4) {
        delete dice4;
    }

    if (redToken) {
        delete redToken;
    }

    if(greenToken){
        delete greenToken;
    }

    if (yellowToken) {
        delete yellowToken;
    }

    if(blueToken){
        delete blueToken;
    }

}
// RulesScreen destructor
RulesScreen::~RulesScreen() {
    // Add any cleanup code if needed
}








----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------








dice.hpp:

#pragma once

#include <SDL.h>
#include <SDL_image.h>
#include <iostream>
#include <string>
#include <vector>


class Dice {
    private:
        std::vector<SDL_Texture*> faceTextures; // Textures for each face of the dice
        int xPosition; // X-coordinate position of the dice
        int yPosition; // Y-coordinate position of the dice
        bool rolling;   // Flag to indicate if the dice is currently rolling
        int score;      // Current score of the dice

        // Load a texture from an image file
        void loadTexture(const std::string& imagePath, SDL_Renderer* renderer, SDL_Texture*& texture);
        
        // Method to roll the dice
        // void roll(SDL_Renderer* renderer); 

        // Method to get the current dice value
        int getValue() const;

    public:
        // Constructor for the Dice class
        Dice(SDL_Renderer* renderer, const std::vector<std::string>& facePaths, int x, int y);

        // Destructor for the Dice class
        ~Dice();

        // Render the current face of the dice
        void render(SDL_Renderer* renderer);

        // Simulate the rolling of the dice
        void roll(SDL_Renderer* renderer);

        // Get the current dice score
        int diceScore() const {
            return score;
        }

        std::vector<SDL_Texture*> faces;  // Vector to store the textures for each face
        int currentValue;  // Variable to store the current dice value


};




----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------


dice.cpp:
#include "dice.hpp"
#include <iostream>
#include <random>
#include <ctime>
#include <algorithm>  // Include the algorithm header

// Constructor for the Dice class
Dice::Dice(SDL_Renderer* renderer, const std::vector<std::string>& facePaths, int x, int y)
    : xPosition(x), yPosition(y), rolling(false) {
    // Load textures for each face of the dice
    for (const auto& path : facePaths) {
        SDL_Texture* texture;
        loadTexture(path, renderer, texture);
        faceTextures.push_back(texture);
    }
}

// Destructor for the Dice class
Dice::~Dice() {
    // Release memory allocated for textures
    for (auto& texture : faceTextures) {
        if (texture) {
            SDL_DestroyTexture(texture);
        }
    }
}

// Load a texture from an image file
void Dice::loadTexture(const std::string& imagePath, SDL_Renderer* renderer, SDL_Texture*& texture) {
    SDL_Surface* surface = IMG_Load(imagePath.c_str());
    if (!surface) {
        std::cerr << "Unable to load dice image! SDL_image Error: " << IMG_GetError() << std::endl;
        return;
    }

    texture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_FreeSurface(surface);

    if (!texture) {
        std::cerr << "Unable to create texture from dice image! SDL_Error: " << SDL_GetError() << std::endl;
    }
}


void Dice::roll(SDL_Renderer* renderer) {
    rolling = true;

    Uint32 startTime = SDL_GetTicks();
    Uint32 currentTime;

    // Roll for 2 seconds
    while ((currentTime = SDL_GetTicks()) - startTime < 2000) {
        // Update every 50 milliseconds
        if ((currentTime - startTime) % 50 == 0) {
            SDL_Delay(50);

            // Randomly select a face for rolling effect
            int randomIndex = rand() % faceTextures.size();
            std::rotate(faceTextures.begin(), faceTextures.begin() + randomIndex, faceTextures.end());

            // Render and display the current face
            render(renderer);
            SDL_RenderPresent(renderer);
        }

        // Check for quit event
        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                rolling = false;
                return;
            }
        }
    }

    rolling = false;

    // Update the score based on the final face of the dice
    int finalFaceIndex = rand() % faceTextures.size();
    score = finalFaceIndex + 1;

    // Render and display the final face
    render(renderer);
    SDL_RenderPresent(renderer);

    std::cout << "Dice Score: " << score << std::endl;  // Print the score
}

void Dice::render(SDL_Renderer* renderer) {
    SDL_Rect destination;
    destination.x = xPosition;
    destination.y = yPosition;

    // Query dimensions of the current face texture
    SDL_QueryTexture(faceTextures.front(), nullptr, nullptr, &destination.w, &destination.h);

    // Render the current face
    SDL_RenderCopy(renderer, faceTextures.front(), nullptr, &destination);
    SDL_RenderPresent(renderer);
}









----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------

tokens.cpp:

// token.cpp
#include "tokens.hpp"
#include <SDL.h>
#include <SDL_image.h>
#include <iostream>
#include <vector>


/*
VECTORS FOR DEFINING PATH OF EACH TOKEN ON THE BOARD.
THE PATHS DO NOT INCLUDE THE FINAL GAME WINNING PATH
*/

//PATH FOR RED TOKEN
std::vector<SDL_Point> Token::boardMovementRed = {
    {55, 305 }, {105, 305}, {155, 305}, 
    {205, 305}, {255, 305}, {305, 255}, {305, 205}, 
    {305, 155}, {305, 105}, {305, 55 }, {305, 5  }, 
    {355, 5  }, {405, 5  }, {405, 55 }, {405, 105}, 
    {405, 155}, {405, 205}, {405, 255}, {455, 305}, 
    {505, 305}, {555, 305}, {605, 305}, {655, 305}, 
    {705, 305}, {705, 355}, {705, 405}, {655, 405}, 
    {605, 405}, {555, 405}, {505, 405}, {455, 405}, 
    {405, 455}, {405, 505}, {405, 555}, {405, 605}, 
    {405, 655}, {405, 705}, {355, 705}, {305, 705},
    {305, 655}, {305, 605}, {305, 555}, {305, 505}, 
    {305, 455}, {255, 405}, {205, 405}, {155, 405}, 
    {105, 405}, {55, 405 }, {5, 405  }, {5, 355  }, 
};


//PATH FOR GREEN TOKEN
std::vector<SDL_Point> Token::boardMovementGreen= {
    {405, 55 }, {405, 105}, {405, 155}, {405, 205}, 
    {405, 255}, {455, 305}, {505, 305}, {555, 305}, 
    {605, 305}, {655, 305}, {705, 305}, {705, 355}, 
    {705, 405}, {655, 405}, {605, 405}, {555, 405}, 
    {505, 405}, {455, 405}, {405, 455}, {405, 505},
    {405, 555}, {405, 605}, {405, 655}, {405, 705}, 
    {355, 705}, {305, 705},{305, 655}, {305, 605}, 
    {305, 555}, {305, 505}, {305, 455}, {255, 405}, 
    {205, 405}, {155, 405}, {105, 405}, {55, 405 }, 
    {5, 405  }, {5, 355  }, {55, 305 }, {105, 305},  
    {155, 305},{205, 305}, {255, 305}, {305, 255}, 
    {305, 205}, {305, 155}, {305, 105}, {305, 55 }, 
    {305, 5  },{355,5}
};


//PATH FOR YELLOW TOKEN
std::vector<SDL_Point> Token::boardMovementYellow= {
    {655, 405}, {605, 405}, {555, 405}, 
    {505, 405}, {455, 405}, {405, 455}, {405, 505},
    {405, 555}, {405, 605}, {405, 655}, {405, 705}, 
    {355, 705}, {305, 705},{305, 655}, {305, 605}, 
    {305, 555}, {305, 505}, {305, 455}, {255, 405}, 
    {205, 405}, {155, 405}, {105, 405}, {55, 405 }, 
    {5, 405  }, {5, 355  }, {55, 305 }, {105, 305},  
    {155, 305},{205, 305}, {255, 305}, {305, 255}, 
    {305, 205}, {305, 155}, {305, 105}, {305, 55 }, 
    {305, 5  },{355,5},{405, 55 }, {405, 105}, 
    {405, 155}, {405, 205}, {405, 255}, {455, 305}, 
    {505, 305}, {555, 305}, {605, 305}, {655, 305}, 
    {705, 305}, {705, 355}
};


//PATH FOR BLUE TOKEN
std::vector<SDL_Point> Token::boardMovementBlue= {
    {305, 655}, {305, 605}, 
    {305, 555}, {305, 505}, {305, 455}, {255, 405}, 
    {205, 405}, {155, 405}, {105, 405}, {55, 405 }, 
    {5, 405  }, {5, 355  }, {55, 305 }, {105, 305},  
    {155, 305},{205, 305}, {255, 305}, {305, 255}, 
    {305, 205}, {305, 155}, {305, 105}, {305, 55 }, 
    {305, 5  },{355,5},{405, 55 }, {405, 105},
    {405, 155}, {405, 205}, {405, 255}, {455, 305}, 
    {505, 305}, {555, 305}, {605, 305}, {655, 305}, 
    {705, 305}, {705, 355}, {705, 405}, {655, 405}, 
    {605, 405}, {555, 405}, {505, 405}, {455, 405}, 
    {405, 655}, {405, 705}, {355, 705}
};








Token::Token(SDL_Renderer* renderer, SDL_Texture* texture)
    : texture(texture), currentX(0), currentY(0) {
    SDL_QueryTexture(texture, nullptr, nullptr, &position.w, &position.h);
}

Token::~Token() {
    if (texture) {
        SDL_DestroyTexture(texture);
    }
}

void Token::render(SDL_Renderer* renderer) {
    SDL_RenderCopy(renderer, texture, nullptr, &position);
}

void Token::setStartPosition(int startX, int startY) {
    currentX = startX;
    currentY = startY;
    position.x = startX;
    position.y = startY;
}



//movement for Red
void Token::moveToNextPositionRed(int diceScore) {
    // Assuming a standard Ludo board
    const int homeX = 5;
    const int homeY = 5;
    const int mainTrackStartX = 55;
    const int mainTrackStartY = 305;
    const int mainTrackLength = 50;
    const int destinationX = 5;
    const int destinationY = 355;

    // Check if the token is in the home area
    if (position.x == homeX && position.y == homeY && diceScore > 0) {
        // Move along the vertical path to the starting point of the main track
        position.y -= diceScore * mainTrackLength; // Adjust TOKEN_STEP_SIZE according to your needs
        if (position.y < mainTrackStartY) {
            position.y = mainTrackStartY;
        }
    } else {
        // Calculate the current position within the main track based on the board movement array
        for (size_t i = 0; i < boardMovementRed.size(); ++i) {
            if (position.x == boardMovementRed[i].x && position.y == boardMovementRed[i].y) {
                int newPositionIndex = i + diceScore;

                // If the new position index exceeds the boardMovement size, set it to the destination
                if (newPositionIndex >= boardMovementRed.size()) {
                    newPositionIndex = boardMovementRed.size() - 1;
                    // newPositionIndex = (i + diceScore) % boardMovement.size();

                }

                // Move the token along the predefined board positions
                position.x = boardMovementRed[newPositionIndex].x;
                position.y = boardMovementRed[newPositionIndex].y;

                // Check if the token has reached the destination
                if (position.x == destinationX && position.y == destinationY) {
                    // You may want to add additional logic or handle reaching the destination here
                    // For now, let's set the position to the destination to stop the token
                    position.x = destinationX;
                    position.y = destinationY;
                }

                break;  // Exit the loop once the new position is set
            }
        }
    }
}




//movement for green
void Token::moveToNextPositionGreen(int diceScore) {
    // Assuming a standard Ludo board
    const int homeX = 450;
    const int homeY = 0;
    const int mainTrackStartX = 605;
    const int mainTrackStartY = 405;
    const int mainTrackLength = 50;
    const int destinationX = 355;
    const int destinationY = 5;

    // Check if the token is in the home area
    if (position.x == homeX && position.y == homeY && diceScore > 0) {
        // Move along the vertical path to the starting point of the main track
        position.y -= diceScore * mainTrackLength; // Adjust TOKEN_STEP_SIZE according to your needs
        if (position.y < mainTrackStartY) {
            position.y = mainTrackStartY;
        }
    } else {
        // Calculate the current position within the main track based on the board movement array
        for (size_t i = 0; i < boardMovementGreen.size(); ++i) {
            if (position.x == boardMovementGreen[i].x && position.y == boardMovementGreen[i].y) {
                int newPositionIndex = i + diceScore;

                // If the new position index exceeds the boardMovement size, set it to the destination
                if (newPositionIndex >= boardMovementGreen.size()) {
                    newPositionIndex = boardMovementGreen.size() - 1;
                    // newPositionIndex = (i + diceScore) % boardMovement.size();

                }

                // Move the token along the predefined board positions
                position.x = boardMovementGreen[newPositionIndex].x;
                position.y = boardMovementGreen[newPositionIndex].y;

                // Check if the token has reached the destination
                if (position.x == destinationX && position.y == destinationY) {
                    // You may want to add additional logic or handle reaching the destination here
                    // For now, let's set the position to the destination to stop the token
                    position.x = destinationX;
                    position.y = destinationY;
                }

                break;  // Exit the loop once the new position is set
            }
        }
    }
}





//movement for Yellow
void Token::moveToNextPositionYellow(int diceScore) {
    // Assuming a standard Ludo board
    const int homeX = 660;
    const int homeY = 450;
    const int mainTrackStartX = 655;
    const int mainTrackStartY = 405;
    const int mainTrackLength = 50;
    const int destinationX = 705;
    const int destinationY = 355;

    // Check if the token is in the home area
    if (position.x == homeX && position.y == homeY && diceScore > 0) {
        // Move along the vertical path to the starting point of the main track
        position.y -= diceScore * mainTrackLength; // Adjust TOKEN_STEP_SIZE according to your needs
        if (position.y < mainTrackStartY) {
            position.y = mainTrackStartY;
        }
    } else {
        // Calculate the current position within the main track based on the board movement array
        for (size_t i = 0; i < boardMovementYellow.size(); ++i) {
            if (position.x == boardMovementYellow[i].x && position.y == boardMovementYellow[i].y) {
                int newPositionIndex = i + diceScore;

                // If the new position index exceeds the boardMovement size, set it to the destination
                if (newPositionIndex >= boardMovementYellow.size()) {
                    newPositionIndex = boardMovementYellow.size() - 1;
                    // newPositionIndex = (i + diceScore) % boardMovement.size();

                }

                // Move the token along the predefined board positions
                position.x = boardMovementYellow[newPositionIndex].x;
                position.y = boardMovementYellow[newPositionIndex].y;

                // Check if the token has reached the destination
                if (position.x == destinationX && position.y == destinationY) {
                    // You may want to add additional logic or handle reaching the destination here
                    // For now, let's set the position to the destination to stop the token
                    position.x = destinationX;
                    position.y = destinationY;
                }

                break;  // Exit the loop once the new position is set
            }
        }
    }
}



//movement for Blue
void Token::moveToNextPositionBlue(int diceScore) {
    // Assuming a standard Ludo board
    const int homeX = 260;
    const int homeY = 710;
    const int mainTrackStartX = 305;
    const int mainTrackStartY = 655;
    const int mainTrackLength = 50;
    const int destinationX = 355;
    const int destinationY = 705;

    // Check if the token is in the home area
    if (position.x == homeX && position.y == homeY && diceScore > 0) {
        // Move along the vertical path to the starting point of the main track
        position.y -= diceScore * mainTrackLength; // Adjust TOKEN_STEP_SIZE according to your needs
        if (position.y < mainTrackStartY) {
            position.y = mainTrackStartY;
        }
    } else {
        // Calculate the current position within the main track based on the board movement array
        for (size_t i = 0; i < boardMovementBlue.size(); ++i) {
            if (position.x == boardMovementBlue[i].x && position.y == boardMovementBlue[i].y) {
                int newPositionIndex = i + diceScore;

                // If the new position index exceeds the boardMovement size, set it to the destination
                if (newPositionIndex >= boardMovementBlue.size()) {
                    newPositionIndex = boardMovementBlue.size() - 1;
                    // newPositionIndex = (i + diceScore) % boardMovement.size();

                }

                // Move the token along the predefined board positions
                position.x = boardMovementBlue[newPositionIndex].x;
                position.y = boardMovementBlue[newPositionIndex].y;

                // Check if the token has reached the destination
                if (position.x == destinationX && position.y == destinationY) {
                    // You may want to add additional logic or handle reaching the destination here
                    // For now, let's set the position to the destination to stop the token
                    position.x = destinationX;
                    position.y = destinationY;
                }

                break;  // Exit the loop once the new position is set
            }
        }
    }
}


